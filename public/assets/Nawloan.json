{
  "swagger": "2.0",
  "info": {
    "description": "This is documentation for shipping app rest api server.  You can find out more about     Swagger at [http://swagger.io](http://swagger.io) or on [irc.freenode.net, #swagger](http://swagger.io/irc/).      For this sample, you can use the api key `special-key` to test the authorization     filters.",
    "version": "1.0.0",
    "title": "Nawloan Api Document",
    "termsOfService": "http://swagger.io/terms/",
    "contact": {
      "email": "info@nawloan.net"
    },
    "license": {
      "name": "Apache 2.0",
      "url": "http://www.apache.org/licenses/LICENSE-2.0.html"
    }
  },
  "host": "nawloan.net",
  "basePath": "/api",
  "tags": [
    {
      "name": "auth",
      "description": "The Api Authorization",
      "externalDocs": {
        "description": "Api url",
        "url": "https://nawloan.net/api/"
      }
    },
    {
  "name": "qrcode",
  "description": "QR code related endpoints",
   "externalDocs": {
        "description": "Api url",
        "url": "https://nawloan.net/api/"
      }
  
},

    {
      "name": "users",
      "description": "Operations about all users type",
   
    },
    {
      "name": "supportCenter",
      "description": "Operations about support center messages",
      "externalDocs": {
        "description": "Api url",
        "url": "https://nawloan.net/api/"
      }
    },
    {
      "name": "cars",
      "description": "Operations about cars",
      "externalDocs": {
        "description": "Api url",
        "url": "https://nawloan.net/api/"
      }
    },
    {
      "name": "shipmentTypes",
      "description": "Operations about shipment types",
      "externalDocs": {
        "description": "Api url",
        "url": "https://nawloan.net/api/"
      }
    },
    {
      "name": "paymentMethods",
      "description": "Operations about payment methods",
      "externalDocs": {
        "description": "Api url",
        "url": "https://nawloan.net/api/"
      }
    },
    {
      "name": "orders",
      "description": "Operations about orders",
      "externalDocs": {
        "description": "Api url",
        "url": "https://nawloan.net/api/"
      }
    },
    {
      "name": "offers",
      "description": "Operations about offers",
      "externalDocs": {
        "description": "Api url",
        "url": "https://nawloan.net/api/"
      }
    },
    {
  "name": "company",
  "description": "Operations about driver companies",
   "externalDocs": {
        "description": "Api url",
        "url": "https://nawloan.net/api/"
      }
    },
    {
      "name": "evaluates",
      "description": "Operations about evaluates",
      "externalDocs": {
        "description": "Api url",
        "url": "https://nawloan.net/api/"
      }
    },
    {
      "name": "transactions",
      "description": "Operations about transactions",
      "externalDocs": {
        "description": "Api url",
        "url": "https://nawloan.net/api/"
      }
    }
  ],
  "schemes": [
    "https",
    "http"
  ],
  "paths": {
  
 "/users/addDriverByCompany/{company_id}": {
  "post": {
    "tags": ["company"],
    "summary": "Register Driver from Company",
    "description": "Allows a shipping company to register a new driver under its account.",
    "operationId": "registerDriverFromCompany",
    "consumes": ["application/json"],
    "produces": ["application/json"],
    "parameters": [
      {
        "name": "company_id",
        "in": "path",
        "required": true,
        "type": "integer",
        "format": "int64"
      },
      {
        "in": "body",
        "name": "body",
        "required": true,
        "schema": {
          "type": "object",
          "properties": {
            "name": { "type": "string" },
            "email": { "type": "string" },
            "password": { "type": "string" },
            "c_password": { "type": "string" },
            "phone": { "type": "string" },
            "commercial_record": { "type": "string" },
            "tax_card": { "type": "string" },
            "location": { "type": "string" },
            "bank_name": { "type": "string" },
            "branch_name": { "type": "string" },
            "account_holder_name": { "type": "string" },
            "account_number": { "type": "string" },
            "soft_code": { "type": "string" },
            "iban": { "type": "string" },
            "active": { "type": "boolean" }
          },
          "required": [
            "name", "email", "password", "c_password", "phone", "commercial_record", "tax_card"
          ]
        }
      }
    ],
    "responses": {
      "200": {
        "description": "Driver registered by company successfully.",
        "schema": {
          "type": "object",
          "properties": {
            "success": { "type": "boolean" },
            "data": {
              "type": "object",
              "properties": {
                "user": {
                  "type": "object",
                  "properties": {
                    "id": { "type": "integer" },
                    "name": { "type": "string" },
                    "email": { "type": "string" },
                    "phone": { "type": "string" },
                    "type": { "type": "string" },
                    "active": { "type": "boolean" },
                    "image": { "type": "string" },
                    "commercial_record": { "type": "string" },
                    "tax_card": { "type": "string" },
                    "location": { "type": "string" },
                    "company_id": { "type": "integer" }
                  }
                }
              }
            },
            "message": { "type": "string" }
          }
        }
      }
    }
  }
},

"/users/factory/image/{id}": {
      "post": {
        "tags": ["users"],
        "summary": "Upload Factory/Customer Company Upload Images",
        "operationId": "registerFactoryImage",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Factory ID",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "requestBody": {
          "required": false,
          "content": {
            "multipart/form-data": {
              "schema": {
                "type": "object",
                "properties": {
                  "image": {
                    "type": "string",
                    "format": "binary"
                  },
                  "commercial_record_image_f": {
                    "type": "string",
                    "format": "binary"
                  },
                  "commercial_record_image_b": {
                    "type": "string",
                    "format": "binary"
                  },
                  "tax_card_image_f": {
                    "type": "string",
                    "format": "binary"
                  },
                  "tax_card_image_b": {
                    "type": "string",
                    "format": "binary"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Customer company images uploaded successfully"
          },
          "422": {
            "description": "Validation error"
          },
          "404": {
            "description": "Customer company not found"
          }
        }
      }
    },

"/orders/{order_id}/generate-qr": {
  "post": {
    "tags": ["qrcode"],
    "summary": "Generate QR Code for Order",
    "description": "Generates a QR code payload for the given order based on the operation type (pick up or receive).",
    "operationId": "generateQRCodeForOrder",
    "consumes": ["application/json"],
    "produces": ["application/json"],
    "parameters": [
      {
        "name": "order_id",
        "in": "path",
        "required": true,
        "type": "integer",
        "format": "int64"
      },
      {
        "in": "body",
        "name": "body",
        "required": true,
        
             "description": "type value pick_up or receive ",
        "schema": {
          "type": "object",
          "properties": {
            "type": {
              "type": "string",
              "enum": ["pick_up", "receive"],
              
            }
          },
          "required": ["type"]
        }
      }
    ],
    "responses": {
      "200": {
        "description": "QR code payload generated successfully.",
        "schema": {
          "type": "object",
          "properties": {
            "qr_payload": {
              "type": "string",
              "description": "Base64 encoded QR code payload"
            }
          }
        }
      }
    }
  }
},

"/orders/verify-qr": {
  "post": {
    "tags": ["qrcode"],
    "summary": "Verify QR Code Payload",
    "description": "Verifies the QR code payload and returns the order operation type.",
    "operationId": "verifyQRCode",
    "consumes": ["application/json"],
    "produces": ["application/json"],
    "parameters": [
      {
        "in": "body",
        "name": "body",
        "required": true,
        "schema": {
          "type": "object",
          "properties": {
            "qr_payload": {
              "type": "string",
              "description": "The encoded QR payload to be verified"
            }
          },
          "required": ["qr_payload"]
        }
      }
    ],
    "responses": {
      "200": {
        "description": "QR code verified successfully.",
        "schema": {
          "type": "object",
          "properties": {
            "success": {
              "type": "boolean"
            },
            "status": {
              "type": "string",
              "description": "The type of operation, e.g., 'pick_up' or 'receive'"
            }
          }
        }
      }
    }
  }
},
  
"/offers/assignDriver/{company_id}": {
  "post": {
    "tags": [
      "offers"
    ],
    "summary": "assign drivers by company",
    "description": "Allows a company to invite selected drivers to an order by sending notifications.",
    "operationId": "sendNotificatonToDrivers",
    "consumes": [
      "application/json"
    ],
    "produces": [
      "application/json"
    ],
    "parameters": [
      {
        "name": "id",
        "in": "path",
        "description": "Company ID",
        "required": true,
        "type": "integer"
      },
      {
        "in": "body",
        "name": "body",
        "description": "Order and driver invitation data",
        "required": true,
        "schema": {
          "type": "object",
          "properties": {
            "order_id": {
              "type": "integer",
              "example": 123
            },
            "drivers_id": {
              "type": "array",
              "items": {
                "type": "integer"
              },
              "example": [45, 67, 89]
            }
          },
          "required": ["order_id", "drivers_id"]
        }
      }
    ],
    "responses": {
      "200": {
        "description": "Notifications sent successfully",
        "schema": {
          "type": "object",
          "properties": {
            "message": {
              "type": "string"
            },
            "notified_count": {
              "type": "integer"
            }
          }
        }
      },
      "400": {
        "description": "Validation error"
      },
      "404": {
        "description": "Company not found"
      }
    }
  }
},  
 "/offers/getByAgencyId/{id}": {
  "get": {
    "tags": [
      "offers"
    ],
    "summary": "Retrieve offers by agency ID",
    "description": "Returns a list of offers associated with the specified agency ID.",
    "operationId": "getOffersByAgencyId",
    "parameters": [
      {
        "name": "id",
        "in": "path",
        "description": "ID of the agency",
        "required": true,
        "type": "integer"
      }
    ],
    "responses": {
      "200": {
        "description": "Successful operation",
        "schema": {
          "type": "object",
          "properties": {
            "message": {
              "type": "string",
              "example": "Offers retrieved successfully."
            },
            "data": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Offer"
              }
            }
          }
        }
      },
      "400": {
        "description": "Invalid ID supplied"
      },
      "404": {
        "description": "Offers not found"
      }
    }
  }
},
"/evaluates/check-rating": {
  "post": {
    "tags": [
      "evaluates"
    ],
    "summary": "Check if a rating already exists",
    "description": "Checks whether a user has already rated another user for a specific order.",
    "operationId": "checkRatingExists",
    "consumes": [
      "application/json"
    ],
    "parameters": [
      {
        "in": "body",
        "name": "body",
        "required": true,
        "schema": {
          "type": "object",
          "properties": {
            "user_id": {
              "type": "integer",
              "example": 1
            },
            "user2_id": {
              "type": "integer",
              "example": 2
            },
            "order_id": {
              "type": "integer",
              "example": 100
            }
          },
          "required": [
            "user_id",
            "user2_id",
            "order_id"
          ]
        }
      }
    ],
    "responses": {
      "200": {
        "description": "Success response",
        "schema": {
          "type": "object",
          "properties": {
            "message": {
              "type": "string",
              "example": "Rating already exists."
            },
            "exists": {
              "type": "boolean",
              "example": true
            }
          }
        }
      },
      "400": {
        "description": "Validation error"
      }
    }
  }
},



    "/api/users/factoryInfo/{id}": {
      "post": {
        "tags": ["users"],
        "summary": "Register Factory/Customer Company Info",
        "operationId": "registerFactoryInfo",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Factory ID",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "commercial_record": {
                    "type": "string"
                  },
                  "tax_card": {
                    "type": "string"
                  },
                  "longitude": {
                    "type": "string"
                  },
                  "latitude": {
                    "type": "string"
                  },
                  "location": {
                    "type": "string"
                  },
                  "bank_name": {
                    "type": "string"
                  },
                  "branch_name": {
                    "type": "string"
                  },
                  "account_holder_name": {
                    "type": "string"
                  },
                  "account_number": {
                    "type": "string"
                  },
                  "soft_code": {
                    "type": "string"
                  },
                  "iban": {
                    "type": "string"
                  }
                },
                "required": ["commercial_record", "tax_card"]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Factory information added successfully"
          }
        }
      }
    
  },


  
  
  
  
  
    "/transactions": {
      "post": {
        "tags": [
          "transactions"
        ],
        "summary": "store new transactions information",
        "description": "This can only be done by the logged in user.",
        "operationId": "createTransaction",
        "produces": [
          "application/xml",
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "store transactions object",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Transaction"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Transaction"
              }
            }
          },
          "400": {
            "description": "Invalid tag value"
          }
        }
      }
    },
    "/transactions/showByOrder/{id}": {
      "get": {
        "tags": [
          "transactions"
        ],
        "summary": "get transactions for by order id",
        "description": "This can only be done by the logged in user.",
        "operationId": "showTransactionByOrderId",
        "produces": [
          "application/xml",
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The name that needs to be fetched. Use order1 for testing. ",
            "required": true,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Transaction"
              }
            }
          },
          "400": {
            "description": "Invalid tag value"
          }
        }
      }
    },
    "/transactions/showByUser/{id}": {
      "get": {
        "tags": [
          "transactions"
        ],
        "summary": "get transactions for by user id",
        "description": "This can only be done by the logged in user.",
        "operationId": "showTransactionByUserId",
        "produces": [
          "application/xml",
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The name that needs to be fetched. Use user id for testing. ",
            "required": true,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Transaction"
              }
            }
          },
          "400": {
            "description": "Invalid tag value"
          }
        }
      }
    },
      "/transactions/showByFactory/{id}": {
    "get": {
      "tags": [
        "transactions"
      ],
      "summary": "Retrieve transactions for a factory user",
      "description": "Fetches all transactions associated with a factory user, including balance and outstanding balance details.",
      "operationId": "getTransactionsByFactory",
      "parameters": [
        {
          "name": "id",
          "in": "path",
          "description": "ID of the factory user",
          "required": true,
          "type": "integer",
          "example": 10
        }
      ],
      "responses": {
        "200": {
          "description": "Successful operation",
          "schema": {
            "type": "object",
            "properties": {
              "count": {
                "type": "integer",
                "example": 3
              },
              "aviable_balance": {
                "type": "string",
                "example": "5000.00"
              },
              "outstanding_balance": {
                "type": "string",
                "example": "1500.00"
              },
              "transaction": {
                "type": "array",
                "items": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "integer",
                      "example": 101
                    },
                    "payment_method_id": {
                      "type": "integer",
                      "example": 2
                    },
                    "payment_status": {
                      "type": "string",
                      "example": "completed"
                    },
                    "pick_up_address": {
                      "type": "string",
                      "example": "123 Factory Lane"
                    },
                    "drop_of_address": {
                      "type": "string",
                      "example": "456 Warehouse Blvd"
                    },
                    "total_price": {
                      "type": "string",
                      "example": "2000.00"
                    },
                    "order_status": {
                      "type": "string",
                      "example": "delivered"
                    },
                    "created_at": {
                      "type": "string",
                      "format": "date-time",
                      "example": "2025-04-13 09:13:22"
                    }
                  }
                }
              }
            }
          }
        },
        "404": {
          "description": "Factory user not found"
        }
      }
    }
  },
  "/transactions/showByDriver/{id}": {
    "get": {
      "tags": [
        "transactions"
      ],
      "summary": "Retrieve transactions for a driver",
      "description": "Fetches all transactions associated with a driver, including available and pending balances.",
      "operationId": "getTransactionsByDriver",
      "parameters": [
        {
          "name": "id",
          "in": "path",
          "description": "ID of the driver",
          "required": true,
          "type": "integer",
          "example": 20
        }
      ],
      "responses": {
        "200": {
          "description": "Successful operation",
          "schema": {
            "type": "object",
            "properties": {
              "count": {
                "type": "integer",
                "example": 5
              },
              "aviable_balance": {
                "type": "string",
                "example": "3000.00"
              },
              "pending_balance": {
                "type": "string",
                "example": "500.00"
              },
              "total_balance": {
                "type": "string",
                "example": "3500.00"
              },
              "transaction": {
                "type": "array",
                "items": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "integer",
                      "example": 202
                    },
                    "payment_method_id": {
                      "type": "integer",
                      "example": 3
                    },
                    "payment_status": {
                      "type": "string",
                      "example": "pending"
                    },
                    "pick_up_address": {
                      "type": "string",
                      "example": "789 Driver St"
                    },
                    "drop_of_address": {
                      "type": "string",
                      "example": "321 Delivery Ave"
                    },
                    "total_price": {
                      "type": "string",
                      "example": "1500.00"
                    },
                    "order_status": {
                      "type": "string",
                      "example": "in_transit"
                    },
                    "created_at": {
                      "type": "string",
                      "format": "date-time",
                      "example": "2025-04-12 14:30:00"
                    }
                  }
                }
              }
            }
          }
        },
        "404": {
          "description": "Driver not found"
        }
      }
    }
  },
    "/transactions/showByDriverCompany/{id}": {
  "get": {
    "tags": [
      "transactions"
    ],
    "summary": "Retrieve transactions for a driver company",
    "description": "Fetches all transactions associated with a driver company, including available, pending, and total balances.",
    "operationId": "getTransactionsByDriverCompany",
    "parameters": [
      {
        "name": "id",
        "in": "path",
        "description": "ID of the driver company",
        "required": true,
        "type": "integer",
        "example": 30
      }
    ],
    "responses": {
      "200": {
        "description": "Successful operation",
        "schema": {
          "type": "object",
          "properties": {
            "count": {
              "type": "integer",
              "example": 7
            },
            "aviable_balance": {
              "type": "string",
              "example": "8000.00"
            },
            "pending_balance": {
              "type": "string",
              "example": "2000.00"
            },
            "total_balance": {
              "type": "string",
              "example": "10000.00"
            },
            "transaction": {
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "id": {
                    "type": "integer",
                    "example": 303
                  },
                  "payment_method_id": {
                    "type": "integer",
                    "example": 4
                  },
                  "payment_status": {
                    "type": "string",
                    "example": "completed"
                  },
                  "pick_up_address": {
                    "type": "string",
                    "example": "456 Company Rd"
                  },
                  "drop_of_address": {
                    "type": "string",
                    "example": "654 Distribution Center"
                  },
                  "total_price": {
                    "type": "string",
                    "example": "2500.00"
                  },
                  "order_status": {
                    "type": "string",
                    "example": "delivered"
                  },
                  "created_at": {
                    "type": "string",
                    "format": "date-time",
                    "example": "2025-04-13 09:13:22"
                  }
                }
              }
            }
          }
        }
      },
      "404": {
        "description": "Driver company not found"
      }
    }
  }
},

    
    
    
    "/evaluates": {
      "get": {
        "tags": [
          "evaluates"
        ],
        "summary": "get all evaluates information",
        "description": "This can only be done by the logged in user.",
        "operationId": "showEvaluate",
        "produces": [
          "application/xml",
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Evaluate"
              }
            }
          },
          "400": {
            "description": "Invalid tag value"
          }
        }
      },
      "post": {
        "tags": [
          "evaluates"
        ],
        "summary": "store new evaluates information",
        "description": "This can only be done by the logged in user.",
        "operationId": "createEvaluate",
        "produces": [
          "application/xml",
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "store evaluates object",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Evaluate"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Evaluate"
              }
            }
          },
          "400": {
            "description": "Invalid tag value"
          }
        }
      }
    },
    "/evaluates/{id}": {
      "put": {
        "tags": [
          "evaluates"
        ],
        "summary": "store evaluates replay comment for customer",
        "description": "This can only be done by the logged in user.",
        "operationId": "createEvaluateReplay",
        "produces": [
          "application/xml",
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The name that needs to be fetched. Use offer1 for testing. ",
            "required": true,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Evaluate"
              }
            }
          },
          "400": {
            "description": "Invalid tag value"
          }
        }
      }
    },
    "/evaluates/showByOrder/{id}": {
      "get": {
        "tags": [
          "evaluates"
        ],
        "summary": "get evaluates for by order id",
        "description": "This can only be done by the logged in user.",
        "operationId": "shwEvaluateByOrderId",
        "produces": [
          "application/xml",
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The name that needs to be fetched. Use order1 for testing. ",
            "required": true,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Evaluate"
              }
            }
          },
          "400": {
            "description": "Invalid tag value"
          }
        }
      }
    },
    "/evaluates/showByUser/{id}": {
      "get": {
        "tags": [
          "evaluates"
        ],
        "summary": "get evaluates for by user id",
        "description": "This can only be done by the logged in user.",
        "operationId": "shwEvaluateByUserId",
        "produces": [
          "application/xml",
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The name that needs to be fetched. Use user id for testing. ",
            "required": true,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Evaluate"
              }
            }
          },
          "400": {
            "description": "Invalid tag value"
          }
        }
      }
    },
    "/evaluates/showByUser2/{id}": {
      "get": {
        "tags": [
          "evaluates"
        ],
        "summary": "get evaluates for by user id (reserver)",
        "description": "This can only be done by the logged in user.",
        "operationId": "shwEvaluateByUser2Id",
        "produces": [
          "application/xml",
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The name that needs to be fetched. Use user id(reserver)  for testing. ",
            "required": true,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Evaluate"
              }
            }
          },
          "400": {
            "description": "Invalid tag value"
          }
        }
      }
    },
    "/offers": {
      "post": {
        "tags": [
          "offers"
        ],
        "summary": "store new offers information",
        "description": "This can only be done by the logged in user.",
        "operationId": "createOffer",
        "produces": [
          "application/xml",
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "store offers object",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Offer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Offer"
              }
            }
          },
          "400": {
            "description": "Invalid tag value"
          }
        }
      }
    },
    "/offers/{id}": {
      "get": {
        "tags": [
          "offers"
        ],
        "summary": "Get offer by offer id",
        "description": "",
        "operationId": "getOfferById",
        "produces": [
          "application/xml",
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The name that needs to be fetched. Use offer1 for testing. ",
            "required": true,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Offer"
              }
            }
          },
          "400": {
            "description": "Invalid tag value"
          }
        }
      },
      "put": {
        "tags": [
          "offers"
        ],
        "summary": "edit offer information",
        "description": "This can only be done by the logged in user.",
        "operationId": "updateOffer",
        "produces": [
          "application/xml",
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "id that need to be updated",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "description": "Updated offer object",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Offer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Offer"
              }
            }
          },
          "400": {
            "description": "Invalid tag value"
          }
        }
      }
    },
    "/offers/getByUserId/{id}": {
      "get": {
        "tags": [
          "offers"
        ],
        "summary": "get offers user id information",
        "description": "This can only be done by the logged in user.",
        "operationId": "getOffersByUserId",
        "produces": [
          "application/xml",
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The name that needs to be fetched. Use user 1 for testing. ",
            "required": true,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Offer"
              }
            }
          },
          "400": {
            "description": "Invalid tag value"
          }
        }
      }
    },
    "/offers/getByDriverId/{id}": {
      "get": {
        "tags": [
          "offers"
        ],
        "summary": "get offers driver id information",
        "description": "This can only be done by the logged in user.",
        "operationId": "getOffersByDriverId",
        "produces": [
          "application/xml",
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The name that needs to be fetched. Use user 1 for testing. ",
            "required": true,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Offer"
              }
            }
          },
          "400": {
            "description": "Invalid tag value"
          }
        }
      }
    },
    "/offers/changeStatus/{id}": {
      "put": {
        "tags": [
          "offers"
        ],
        "summary": "change offer status information",
        "description": "This can only be done by the logged in user.",
        "operationId": "changeOfferStatus",
        "produces": [
          "application/xml",
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The name that needs to be fetched. Use offer1 for testing. ",
            "required": true,
            "type": "integer"
          },
          {
            "in": "body",
            "name": "body",
            "description": "Updated offer object",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Offer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Offer"
              }
            }
          },
          "400": {
            "description": "Invalid tag value"
          }
        }
      }
    },
    "/offers/getByStatus": {
      "get": {
        "tags": [
          "offers"
        ],
        "summary": "get offers information by offer status and user id",
        "description": "get offers information by offer status ,and you can send user_id with request to filter user offers",
        "operationId": "getOffersByStatus",
        "produces": [
          "application/xml",
          "application/json"
        ],
        "parameters": [
          {
            "name": "status",
            "in": "query",
            "description": "The name that needs to be fetched. Use user 1 for testing. ",
            "required": true,
            "type": "string"
          },
          {
            "name": "user_id",
            "in": "query",
            "description": " ",
            "required": true,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Offer"
              }
            }
          },
          "400": {
            "description": "Invalid tag value"
          }
        }
      }
    },
    "/orders": {
      "post": {
        "tags": [
          "orders"
        ],
        "summary": "store new order information",
        "description": "This can only be done by the logged in user.",
        "operationId": "createOrder",
        "produces": [
          "application/xml",
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "Updated order object",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Order"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Order"
              }
            }
          },
          "400": {
            "description": "Invalid tag value"
          }
        }
      }
    },
    "/orders/{id}": {
      "get": {
        "tags": [
          "orders"
        ],
        "summary": "Get order by order id",
        "description": "",
        "operationId": "getOrderById",
        "produces": [
          "application/xml",
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The name that needs to be fetched. Use order1 for testing. ",
            "required": true,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Order"
              }
            }
          },
          "400": {
            "description": "Invalid tag value"
          }
        }
      },
      "put": {
        "tags": [
          "orders"
        ],
        "summary": "edit order information",
        "description": "This can only be done by the logged in user.",
        "operationId": "updateOrder",
        "produces": [
          "application/xml",
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "id that need to be updated",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "description": "Updated order object",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Order"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Order"
              }
            }
          },
          "400": {
            "description": "Invalid tag value"
          }
        }
      }
    },
    
    "/orders/changeStatus/{id}": {
      "put": {
        "tags": [
          "orders"
        ],
        "summary": "change order status information",
        "description": "This can only be done by the logged in user.",
        "operationId": "changeOrderStatus",
        "produces": [
          "application/xml",
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The name that needs to be fetched. Use order1 for testing. ",
            "required": true,
            "type": "integer"
          },
          {
            "in": "body",
            "name": "body",
            "description": "Updated order object",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Order"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Order"
              }
            }
          },
          "400": {
            "description": "Invalid tag value"
          }
        }
      }
    },
   "/orders/getByStatus": {
  "get": {
    "tags": [
      "orders"
    ],
    "summary": "Get orders filtered by status, user, car, or address",
    "description": "Fetch orders based on various filters like status, user_id, car_id, and addresses.",
    "operationId": "getOrdersByStatus",
    "produces": [
      "application/json"
    ],
    "parameters": [
      {
        "name": "status",
        "in": "query",
        "description": "Filter by order status (e.g., pending, approved, delivered)",
        "required": false,
        "type": "string"
      },
      {
        "name": "user_id",
        "in": "query",
        "description": "Filter by user ID",
        "required": false,
        "type": "integer"
      },
      {
        "name": "pick_up_address",
        "in": "query",
        "description": "Filter orders by pick-up address (partial match)",
        "required": false,
        "type": "string"
      },
      {
        "name": "drop_of_address",
        "in": "query",
        "description": "Filter orders by drop-off address (partial match)",
        "required": false,
        "type": "string"
      },
      {
        "name": "car_id",
        "in": "query",
        "description": "Filter by car ID used in the order",
        "required": false,
        "type": "integer"
      }
    ],
    "responses": {
      "200": {
        "description": "Successful operation",
        "schema": {
          "$ref": "#/definitions/OrderListResponse"
        }
      },
      "400": {
        "description": "Invalid input parameters"
      }
    }
  }
},
"/orders/orders-invites/user/{user_id}": {
  "get": {
    "tags": [
      "orders"
    ],
    "summary": "Get order invites for user",
    "description": "Retrieves a list of order invites assigned by a user (typically a driver company) to drivers.",
    "operationId": "getOrderInvitesByUser",
    "produces": [
      "application/json"
    ],
    "parameters": [
      {
        "name": "user_id",
        "in": "path",
        "description": "ID of the user (company) who sent the invites.",
        "required": true,
        "type": "integer",
        "example": 27
      }
    ],
    "responses": {
      "200": {
        "description": "Successful response with order invites",
        "schema": {
          "type": "object",
          "properties": {
            "message": {
              "type": "string",
              "example": "Orders invites retrieved successfully."
            },
            "data": {
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "id": { "type": "integer", "example": 1 },
                  "order_id": { "type": "integer", "example": 1 },
                  "user_id": { "type": "integer", "example": 27 },
                  "driver_id": { "type": "integer", "example": 76 },
                  "created_at": { "type": "string", "format": "date-time", "example": "2023-01-30 12:22:46" },
                  "updated_at": { "type": "string", "format": "date-time", "example": "2023-01-30 12:22:46" },
                  "order": {
                    "type": ["object", "null"],
                    "example": null
                  },
                  "offers": {
                    "type": "array",
                    "items": {},
                    "example": []
                  }
                }
              }
            }
          }
        }
      },
      "404": {
        "description": "No invites found for this user"
      }
    }
  }
},

"/orders/orders-invites/order/{order_id}": {
  "get": {
    "tags": [
      "orders"
    ],
    "summary": "Get invites by order ID",
    "description": "Retrieve all invitations related to a specific order, including company and user data.",
    "operationId": "getOrderInvitesByOrderId",
    "produces": [
      "application/json"
    ],
    "parameters": [
      {
        "name": "order_id",
        "in": "path",
        "description": "ID of the order",
        "required": true,
        "type": "integer"
      }
    ],
    "responses": {
      "200": {
        "description": "Successful operation",
        "schema": {
          "type": "object",
          "properties": {
            "message": {
              "type": "string"
            },
            "data": {
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "id": { "type": "integer" },
                  "order_id": { "type": "integer" },
                  "user_id": { "type": "integer" },
                  "driver_id": { "type": "integer" },
                  "created_at": { "type": "string", "format": "date-time" },
                  "updated_at": { "type": "string", "format": "date-time" },
                  "order": {
                    "type": ["object", "null"]
                  },
                  "offers": {
                    "type": "array",
                    "items": {}
                  },
                  "user": {
                    "type": "object",
                    "properties": {
                      "id": { "type": "integer" },
                      "name": { "type": "string" },
                      "email": { "type": ["string", "null"] },
                      "type": { "type": "string" },
                      "user_type": { "type": "string" },
                      "phone": { "type": "string" },
                      "active": { "type": "integer" },
                      "online": { "type": "integer" },
                      "created_at": { "type": "string", "format": "date-time" },
                      "updated_at": { "type": "string", "format": "date-time" },
                      "user_data": {
                        "type": "object",
                        "properties": {
                          "id": { "type": "integer" },
                          "pending_balance": { "type": "number" },
                          "outstanding_balance": { "type": "number" },
                          "balance": { "type": "number" },
                          "commercial_record": { "type": "string" },
                          "tax_card": { "type": "string" },
                          "latitude": { "type": "string" },
                          "longitude": { "type": "string" },
                          "type": { "type": "string" },
                          "user_id": { "type": "integer" },
                          "created_at": { "type": "string", "format": "date-time" },
                          "updated_at": { "type": "string", "format": "date-time" },
                          "image": { "type": "string" }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      },
      "404": {
        "description": "No invites found for this order"
      }
    }
  }
},
"/orders/sendNotificatonToDrivers/{id}": {
  "post": {
    "tags": [
      "orders"
    ],
    "summary": "Send notification to drivers by company",
    "description": "Allows a company to invite selected drivers to an order by sending notifications.",
    "operationId": "sendNotificatonToDrivers",
    "consumes": [
      "application/json"
    ],
    "produces": [
      "application/json"
    ],
    "parameters": [
      {
        "name": "id",
        "in": "path",
        "description": "Company ID",
        "required": true,
        "type": "integer"
      },
      {
        "in": "body",
        "name": "body",
        "description": "Order and driver invitation data",
        "required": true,
        "schema": {
          "type": "object",
          "properties": {
            "order_id": {
              "type": "integer",
              "example": 123
            },
            "drivers_id": {
              "type": "array",
              "items": {
                "type": "integer"
              },
              "example": [45, 67, 89]
            }
          },
          "required": ["order_id", "drivers_id"]
        }
      }
    ],
    "responses": {
      "200": {
        "description": "Notifications sent successfully",
        "schema": {
          "type": "object",
          "properties": {
            "message": {
              "type": "string"
            },
            "notified_count": {
              "type": "integer"
            }
          }
        }
      },
      "400": {
        "description": "Validation error"
      },
      "404": {
        "description": "Company not found"
      }
    }
  }
},
"/orders/getByUserId/{id}": {
  "get": {
    "tags": [
      "orders"
    ],
    "summary": "Get orders by user ID",
    "description": "Retrieve all orders placed by a specific user.",
    "operationId": "getOrdersByUserId",
    "produces": [
      "application/json"
    ],
    "parameters": [
      {
        "name": "id",
        "in": "path",
        "description": "User ID to fetch orders for",
        "required": true,
        "type": "integer",
        "example": 5
      }
    ],
    "responses": {
      "200": {
        "description": "Orders information retrieved successfully",
        "schema": {
          "type": "object",
          "properties": {
            "count": {
              "type": "integer",
              "example": 2
            },
            "orders": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Order"
              }
            }
          }
        }
      },
      "404": {
        "description": "User or orders not found"
      }
    }
  }
},
"/orders/getByDriverId/{id}": {
  "get": {
    "tags": [
      "orders"
    ],
    "summary": "Get orders by driver ID",
    "description": "Retrieve all orders assigned to a specific driver.",
    "operationId": "getOrdersByDriverId",
    "produces": [
      "application/json"
    ],
    "parameters": [
      {
        "name": "id",
        "in": "path",
        "description": "Driver ID to fetch orders for",
        "required": true,
        "type": "integer",
        "example": 76
      }
    ],
    "responses": {
      "200": {
        "description": "Orders information retrieved successfully",
        "schema": {
          "type": "object",
          "properties": {
            "count": {
              "type": "integer",
              "example": 3
            },
            "orders": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Order"
              }
            }
          }
        }
      },
      "404": {
        "description": "Driver or orders not found"
      }
    }
  }
},
"/orders/orders-invites/driver/{driver_id}": {
  "get": {
    "tags": [
      "orders"
    ],
    "summary": "Get orders invites by driver ID",
    "description": "Retrieve all orders invites sent to a specific driver.",
    "operationId": "getOrdersInvitesByDriverId",
    "produces": [
      "application/json"
    ],
    "parameters": [
      {
        "name": "driver_id",
        "in": "path",
        "description": "Driver ID to fetch invites for",
        "required": true,
        "type": "integer",
        "example": 77
      }
    ],
    "responses": {
      "200": {
        "description": "Orders invites retrieved successfully",
        "schema": {
          "type": "object",
          "properties": {
            "message": {
              "type": "string",
              "example": "Orders invites retrieved successfully."
            },
            "data": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Invite"
              }
            }
          }
        }
      },
      "404": {
        "description": "No invites found for this driver"
      }
    }
  }
},

"/orders/tracking/{order_id}": {
  "get": {
    "tags": [
      "orders"
    ],
    "summary": "Track an order",
    "description": "Retrieve tracking details including pickup and drop-off coordinates for a specific order.",
    "operationId": "trackOrder",
    "produces": [
      "application/json"
    ],
    "parameters": [
      {
        "name": "order",
        "in": "path",
        "description": "Order ID to track",
        "required": true,
        "type": "integer",
        "example": 1
      }
    ],
    "responses": {
      "200": {
        "description": "Tracking details retrieved successfully",
        "schema": {
          "type": "object",
          "properties": {
            "pick_up_address": { "type": "string", "example": "Jeddah Warehouse" },
            "pick_up_late": { "type": "string", "example": "21.5433" },
            "pick_up_long": { "type": "string", "example": "39.1728" },
            "drop_of_address": { "type": "string", "example": "Riyadh Central" },
            "drop_of_late": { "type": "string", "example": "24.7136" },
            "drop_of_long": { "type": "string", "example": "46.6753" }
          }
        }
      },
      "404": {
        "description": "Order not found"
      }
    }
  }
},
"/orders/getLimtedOrders": {
  "get": {
    "tags": [
      "orders"
    ],
    "summary": "Get limited list of orders",
    "description": "Retrieve a paginated list of orders based on optional status, start, and limit query parameters.",
    "operationId": "getLimitedOrders",
    "produces": [
      "application/json"
    ],
    "parameters": [
      {
        "name": "start",
        "in": "query",
        "description": "Starting index for pagination",
        "required": false,
        "type": "integer",
        "example": 0
      },
      {
        "name": "limit",
        "in": "query",
        "description": "Number of orders to return",
        "required": false,
        "type": "integer",
        "example": 10
      },
      {
        "name": "status",
        "in": "query",
        "description": "Filter orders by status (e.g., pending, complete)",
        "required": false,
        "type": "string",
        "example": "pending"
      }
    ],
    "responses": {
      "200": {
        "description": "Limited orders retrieved successfully",
        "schema": {
          "type": "object",
          "properties": {
            "count": { "type": "integer", "example": 2 },
            "orders": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Order"
              }
            }
          }
        }
      }
    }
  }
},


   
    
    "/paymentMethods": {
      "get": {
        "tags": [
          "paymentMethods"
        ],
        "summary": "Get all payment methods information",
        "description": "",
        "operationId": "getPaymentMethods",
        "produces": [
          "application/xml",
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/PaymentMethod"
              }
            }
          },
          "400": {
            "description": "Invalid tag value"
          }
        }
      }
    },
    "/paymentMethods/{id}": {
      "get": {
        "tags": [
          "paymentMethods"
        ],
        "summary": "Get payment method by method id",
        "description": "",
        "operationId": "getPaymentMethodById",
        "produces": [
          "application/xml",
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The name that needs to be fetched. Use payment method 1 for testing. ",
            "required": true,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/PaymentMethod"
              }
            }
          },
          "400": {
            "description": "Invalid tag value"
          }
        }
      }
    },
    "/shipmentTypes": {
      "get": {
        "tags": [
          "shipmentTypes"
        ],
        "summary": "Get all shipment types information",
        "description": "",
        "operationId": "getShipmentTypes",
        "produces": [
          "application/xml",
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/ShipmentType"
              }
            }
          },
          "400": {
            "description": "Invalid tag value"
          }
        }
      }
    },
    "/shipmentTypes/{id}": {
      "get": {
        "tags": [
          "shipmentTypes"
        ],
        "summary": "Get shipment type by shipment type id",
        "description": "",
        "operationId": "getShipmentTypeById",
        "produces": [
          "application/xml",
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The name that needs to be fetched. Use shipment type 1 for testing. ",
            "required": true,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/ShipmentType"
              }
            }
          },
          "400": {
            "description": "Invalid tag value"
          }
        }
      }
    },
    "/cars": {
      "get": {
        "tags": [
          "cars"
        ],
        "summary": "Get all cars information",
        "description": "",
        "operationId": "getCars",
        "produces": [
          "application/xml",
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Car"
              }
            }
          },
          "400": {
            "description": "Invalid tag value"
          }
        }
      }
    },
    "/cars/normal/{id}": {
      "get": {
        "tags": [
          "cars"
        ],
        "summary": "Get normal car by car id",
        "description": "",
        "operationId": "getCarById",
        "produces": [
          "application/xml",
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The name that needs to be fetched. Use car1 for testing. ",
            "required": true,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Car"
              }
            }
          },
          "400": {
            "description": "Invalid tag value"
          }
        }
      }
    },
    "/supportCenter": {
  "post": {
    "tags": [
      "supportCenter"
    ],
    "summary": "Store new support center message",
    "description": "This can only be done by a logged-in user.",
    "operationId": "createSupportCenterMessage",
    "produces": [
      "application/json"
    ],
    "parameters": [
      {
        "in": "body",
        "name": "body",
        "description": "Support center message data",
        "required": true,
        "schema": {
          "type": "object",
          "properties": {
            "user_id": {
              "type": "integer",
              "example": 1
            },
            "name": {
              "type": "string",
              "example": "John Doe"
            },
            "email": {
              "type": "string",
              "example": "johndoe@example.com"
            },
            "phone": {
              "type": "string",
              "example": "0234567890"
            },
            "phone_code": {
              "type": "string",
              "example": "+20"
            },
            "title": {
              "type": "string",
              "example": "Issue with Order #123"
            },
            "message": {
              "type": "string",
              "example": "The order has not been delivered yet."
            },
            "desc": {
              "type": "string",
              "example": "Order placed on May 10th."
            },
            "notes": {
              "type": "string",
              "example": "Urgent assistance required."
            }
          },
          "required": ["user_id", "title", "message"]
        }
      }
    ],
    "responses": {
      "200": {
        "description": "Support center message created successfully",
        "schema": {
          "$ref": "#/definitions/SupportCenter"
        }
      },
      "400": {
        "description": "Invalid input or validation failed"
      }
    }
  }
},

    "/supportCenter/{id}": {
      "get": {
        "tags": [
          "supportCenter"
        ],
        "summary": "Get support center message by message id",
        "description": "",
        "operationId": "getSupportCenterById",
        "produces": [
          "application/xml",
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The name that needs to be fetched. Use offer1 for testing. ",
            "required": true,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/SupportCenter"
              }
            }
          },
          "400": {
            "description": "Invalid tag value"
          }
        }
      }
    },
    "/supportCenter/getByUserId/{id}": {
      "get": {
        "tags": [
          "supportCenter"
        ],
        "summary": "get support center message user id information",
        "description": "This can only be done by the logged in user.",
        "operationId": "getsupportCenterByUserId",
        "produces": [
          "application/xml",
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The name that needs to be fetched. Use user 1 for testing. ",
            "required": true,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/SupportCenter"
              }
            }
          },
          "400": {
            "description": "Invalid tag value"
          }
        }
      }
    },
    "/users/setLocation/{id}": {
      "put": {
        "tags": [
          "users"
        ],
        "summary": "update user location",
        "description": "",
        "operationId": "setLocation",
        "produces": [
          "application/xml",
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The user id",
            "required": true,
            "type": "integer"
          },
          {
            "name": "location",
            "in": "query",
            "description": "The user location [lang,lat] , Send in the body.",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation"
          },
          "400": {
            "description": "Invalid tag value"
          }
        }
      }
    },
    "/users/normal": {
      "get": {
        "tags": [
          "users"
        ],
        "summary": "Get all normal users information",
        "description": "",
        "operationId": "getNormalUsers",
        "produces": [
          "application/xml",
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/User"
              }
            }
          },
          "400": {
            "description": "Invalid tag value"
          }
        }
      }
    },
    "/users/normal/{id}": {
      "get": {
        "tags": [
          "users"
        ],
        "summary": "Get normal user by user id",
        "description": "",
        "operationId": "getUserById",
        "produces": [
          "application/xml",
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The name that needs to be fetched. Use user1 for testing. ",
            "required": true,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/User"
              }
            }
          },
          "400": {
            "description": "Invalid tag value"
          }
        }
      },
      "put": {
        "tags": [
          "users"
        ],
        "summary": "edit normal user information",
        "description": "This can only be done by the logged in user.",
        "operationId": "updateUser",
        "produces": [
          "application/xml",
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "name that need to be updated",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "description": "Updated normal user object",
            "required": true,
            "schema": {
              "$ref": "#/definitions/User"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/User"
              }
            }
          },
          "400": {
            "description": "Invalid tag value"
          }
        }
      }
    },
    "/users/factories": {
      "get": {
        "tags": [
          "users"
        ],
        "summary": "Get all Enterprises information",
        "description": "",
        "operationId": "getEnterprise",
        "produces": [
          "application/xml",
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The name that needs to be fetched. Use user1 for testing. ",
            "required": true,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Enterprise"
              }
            }
          },
          "400": {
            "description": "Invalid tag value"
          }
        }
      }
    },
    "/users/factory/{id}": {
      "get": {
        "tags": [
          "users"
        ],
        "summary": "Get Enterprise by user id",
        "description": "",
        "operationId": "getEnterpriseById",
        "produces": [
          "application/xml",
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The name that needs to be fetched. Use user1 for testing. ",
            "required": true,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Enterprise"
              }
            }
          },
          "400": {
            "description": "Invalid tag value"
          }
        }
      },
      "put": {
        "tags": [
          "users"
        ],
        "summary": "Updated Enterprise",
        "description": "This can only be done by the logged in user.",
        "operationId": "updateEnterprise",
        "produces": [
          "application/xml",
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "name that need to be updated",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "description": "Updated Enterprise object",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Enterprise"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Enterprise"
              }
            }
          },
          "400": {
            "description": "Invalid tag value"
          }
        }
      }
    },
    "/users/drivers": {
      "get": {
        "tags": [
          "users"
        ],
        "summary": "Get drivers information",
        "description": "",
        "operationId": "getDrivers",
        "produces": [
          "application/xml",
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The name that needs to be fetched. Use user1 for testing. ",
            "required": true,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Driver"
              }
            }
          },
          "400": {
            "description": "Invalid tag value"
          }
        }
      }
    },
    "/users/driver/{id}": {
      "get": {
        "tags": [
          "users"
        ],
        "summary": "Get driver by user id",
        "description": "",
        "operationId": "getDriverById",
        "produces": [
          "application/xml",
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The name that needs to be fetched. Use user1 for testing. ",
            "required": true,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Driver"
              }
            }
          },
          "400": {
            "description": "Invalid tag value"
          }
        }
      },
      "put": {
        "tags": [
          "users"
        ],
        "summary": "Updated driver",
        "description": "This can only be done by the logged in user.",
        "operationId": "updateDriver",
        "produces": [
          "application/xml",
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "name that need to be updated",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "description": "Updated driver object",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Driver"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Driver"
              }
            }
          },
          "400": {
            "description": "Invalid tag value"
          }
        }
      }
    },
    "/users/drivercompanies": {
      "get": {
        "tags": [
          "users"
        ],
        "summary": "Get driver companies information",
        "description": "",
        "operationId": "getDriverCompanies",
        "produces": [
          "application/xml",
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The name that needs to be fetched. Use user1 for testing. ",
            "required": true,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/DriverCompany"
              }
            }
          },
          "400": {
            "description": "Invalid tag value"
          }
        }
      }
    },
    "/users/drivercompany/{id}": {
      "get": {
        "tags": [
          "users"
        ],
        "summary": "Get driver by user id",
        "description": "",
        "operationId": "getDriverCompanyById",
        "produces": [
          "application/xml",
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The name that needs to be fetched. Use user1 for testing. ",
            "required": true,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/DriverCompany"
              }
            }
          },
          "400": {
            "description": "Invalid tag value"
          }
        }
      },
      "put": {
        "tags": [
          "users"
        ],
        "summary": "Updated driver company",
        "description": "This can only be done by the logged in user.",
        "operationId": "updateDriverCompany",
        "produces": [
          "application/xml",
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "name that need to be updated",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "description": "Updated driver object",
            "required": true,
            "schema": {
              "$ref": "#/definitions/DriverCompany"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/DriverCompany"
              }
            }
          },
          "400": {
            "description": "Invalid tag value"
          }
        }
      }
    },
{
  "path": "/api/users/drivercompany/image/{id}",
  "method": "post",
  "tags": ["Users"],
  "summary": "Upload Driver Company Images",
  "parameters": [
    {
      "name": "id",
      "in": "path",
      "required": true,
      "schema": {
        "type": "integer"
      },
      "description": "Driver company ID"
    }
  ],
  "requestBody": {
    "required": true,
    "content": {
      "multipart/form-data": {
        "schema": {
          "type": "object",
          "properties": {
            "image": {
              "type": "string",
              "format": "binary"
            },
            "commercial_record_image_f": {
              "type": "string",
              "format": "binary"
            },
            "commercial_record_image_b": {
              "type": "string",
              "format": "binary"
            },
            "tax_card_image_f": {
              "type": "string",
              "format": "binary"
            },
            "tax_card_image_b": {
              "type": "string",
              "format": "binary"
            }
          }
        }
      }
    }
  },
  "responses": {
    "200": {
      "description": "Driver company images uploaded successfully"
    },
    "400": {
      "description": "Validation error"
    },
    "404": {
      "description": "Shipping Company not exists"
    }
  }
},
    
    
    
    
    "/users/driverInfo/{id}": {
  "post": {
    "tags": ["users"],
    "summary": "Register Driver Info",
    "description": "Registers or updates driver information.",
    "operationId": "registerDriverInfo",
    "parameters": [
      {
        "name": "id",
        "in": "path",
        "required": true,
        "type": "integer",
        "description": "Driver's user ID"
      }
    ],
    "requestBody": {
      "required": true,
      "content": {
        "application/json": {
          "schema": {
            "type": "object",
            "properties": {
              "location": { "type": "string" },
              "national_id": { "type": "string" },
              "track_type": { "type": "integer" },
              "driving_license_number": { "type": "string" },
              "track_license_number": { "type": "string" },
              "track_number": { "type": "string" },
              "company_id": { "type": "integer" },
              "longitude": { "type": "string" },
              "latitude": { "type": "string" }
            },
            "required": [
              "location",
              "national_id",
              "track_type",
              "driving_license_number",
              "track_license_number",
              "track_number",
              "company_id",
              "longitude",
              "latitude"
            ]
          }
        }
      }
    },
    "responses": {
      "200": {
        "description": "Driver info registered successfully.",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/SuccessResponse"
            }
          }
        }
      },
      "400": {
        "description": "Validation error or missing fields"
      }
    }
  }
},

"/users/driver/image/{id}": {
  "post": {
    "tags": [
      "users"
    ],
    "summary": "Upload Driver Images",
    "description": "Upload driver's images including profile, ID, license and truck photos.",
    "operationId": "registerDriverImage",
    "consumes": [
      "multipart/form-data"
    ],
    "parameters": [
      {
        "name": "id",
        "in": "path",
        "required": true,
        "type": "integer",
        "description": "Driver ID"
      },
      {
        "name": "image",
        "in": "formData",
        "type": "file",
        "required": false,
        "description": "Profile Image"
      },
      {
        "name": "national_id_image_f",
        "in": "formData",
        "type": "file",
        "required": false,
        "description": "National ID Front Image"
      },
      {
        "name": "national_id_image_b",
        "in": "formData",
        "type": "file",
        "required": false,
        "description": "National ID Back Image"
      },
      {
        "name": "driving_license_image_f",
        "in": "formData",
        "type": "file",
        "required": false
      },
      {
        "name": "driving_license_image_b",
        "in": "formData",
        "type": "file",
        "required": false
      },
      {
        "name": "track_license_image_f",
        "in": "formData",
        "type": "file",
        "required": false
      },
      {
        "name": "track_license_image_b",
        "in": "formData",
        "type": "file",
        "required": false
      },
      {
        "name": "track_image_f",
        "in": "formData",
        "type": "file",
        "required": false
      },
      {
        "name": "track_image_b",
        "in": "formData",
        "type": "file",
        "required": false
      },
      {
        "name": "track_image_s",
        "in": "formData",
        "type": "file",
        "required": false
      }
    ],
    "responses": {
      "200": {
        "description": "successful operation",
        "schema": {
          "$ref": "#/definitions/User"
        }
      },
      "422": {
        "description": "Validation Error"
      },
      "404": {
        "description": "Driver not found"
      }
    }
  }
},

  "/auth/register/user": {
  "post": {
    "tags": [
      "auth"
    ],
    "summary": "Register Customer",
    "description": "Create a new customer account",
    "operationId": "registerCustomer",
    "produces": [
      "application/json"
    ],
    "parameters": [
      {
        "in": "body",
        "name": "body",
        "description": "Customer registration fields",
        "required": true,
        "schema": {
          "type": "object",
          "properties": {
            "name": {
              "type": "string"
            },
            "email": {
              "type": "string"
            },
            "phone": {
              "type": "string"
            },
            "password": {
              "type": "string"
            },
            "c_password": {
              "type": "string"
            },
            "image": {
              "type": "string",
              "format": "binary"
            }
          },
          "required": [
            "name",
            "phone",
            "password",
            "c_password"
          ]
        }
      }
    ],
    "responses": {
      "200": {
        "description": "Successful registration",
        "schema": {
          "$ref": "#/definitions/User"
        }
      },
      "400": {
        "description": "Validation error"
      }
    }
  }
},
"/users/normal/image/{id}": {
  "post": {
    "tags": ["users"],
    "summary": "Upload Customer Image",
    "description": "Upload profile image for a registered customer",
    "operationId": "uploadCustomerImage",
    "consumes": ["multipart/form-data"],
    "produces": ["application/json"],
    "parameters": [
      {
        "name": "id",
        "in": "path",
        "description": "User ID",
        "required": true,
        "type": "integer",
        "format": "int64"
      },
      {
        "in": "formData",
        "name": "image",
        "description": "Customer profile image file",
        "required": false,
        "type": "file"
      }
    ],
    "responses": {
      "200": {
        "description": "Image uploaded successfully",
        "schema": {
          "$ref": "#/definitions/User"
        }
      },
      "400": {
        "description": "Validation error"
      }
    }
  }
},


    
    "/auth/login": {
      "post": {
        "tags": [
          "auth"
        ],
        "summary": "Logs user into the system",
        "description": "",
        "operationId": "loginUser",
        "produces": [
          "application/xml",
          "application/json"
        ],
        "parameters": [
          {
            "name": "email",
            "in": "query",
            "description": "The user email for login",
            "required": true,
            "type": "string"
          },
          {
            "name": "password",
            "in": "query",
            "description": "The password for login in clear text",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/User"
              }
            }
          },
          "400": {
            "description": "Invalid tag value"
          }
        }
      }
    },
    "/auth/verifyPhone/{id}": {
      "post": {
        "tags": [
          "auth"
        ],
        "summary": "account verification via phone otp",
        "description": "",
        "operationId": "verifyPhone",
        "produces": [
          "application/xml",
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The user id",
            "required": true,
            "type": "integer"
          },
          {
            "name": "code",
            "in": "query",
            "description": "The verification code , send in body",
            "required": true,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation"
          },
          "400": {
            "description": "Invalid tag value"
          }
        }
      }
    },
    "/auth/sendOtp": {
      "post": {
        "tags": [
          "auth"
        ],
        "summary": "send otp code to verify phone number",
        "description": "",
        "operationId": "sendOtp",
        "produces": [
          "application/xml",
          "application/json"
        ],
        "parameters": [
          {
            "name": "phone",
            "in": "query",
            "description": "The user phone,Send in the body.",
            "required": true,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation"
          },
          "400": {
            "description": "Invalid tag value"
          }
        }
      }
    },
    "/auth/verifyOtp": {
      "post": {
        "tags": [
          "auth"
        ],
        "summary": "Verify otp code for verify phone number",
        "description": "",
        "operationId": "verifyOtp",
        "produces": [
          "application/xml",
          "application/json"
        ],
        "parameters": [
          {
            "name": "code",
            "in": "query",
            "description": "The otp code,Send in the body.",
            "required": true,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation"
          },
          "400": {
            "description": "Invalid tag value"
          }
        }
      }
    },
    "/auth/password/otp": {
      "post": {
        "tags": [
          "auth"
        ],
        "summary": "send verification code via phone otp",
        "description": "",
        "operationId": "changePasswordSendOtp",
        "produces": [
          "application/xml",
          "application/json"
        ],
        "parameters": [
          {
            "name": "phone",
            "in": "path",
            "description": "The user phone number,Send in the body",
            "required": true,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation"
          },
          "400": {
            "description": "Invalid tag value"
          }
        }
      }
    },
    "/auth/password/checkCode": {
      "post": {
        "tags": [
          "auth"
        ],
        "summary": "change password otp code is valid",
        "description": "",
        "operationId": "changePasswordCheckOtpcode",
        "produces": [
          "application/xml",
          "application/json"
        ],
        "parameters": [
          {
            "name": "code",
            "in": "query",
            "description": "The otp code ,Send in the body",
            "required": true,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation"
          },
          "400": {
            "description": "Invalid tag value"
          }
        }
      }
    },
    "/auth/password/reset": {
      "post": {
        "tags": [
          "auth"
        ],
        "summary": "change password reset password",
        "description": "",
        "operationId": "changePasswordReset",
        "produces": [
          "application/xml",
          "application/json"
        ],
        "parameters": [
          {
            "name": "code",
            "in": "query",
            "description": "The code ,Send in the body",
            "required": true,
            "type": "integer"
          },
          {
            "name": "password",
            "in": "query",
            "description": "The new password ,Send in the body",
            "required": true,
            "type": "integer"
          },
          {
            "name": "password_confirmation",
            "in": "query",
            "description": "The new password confirmation ,Send in the body",
            "required": true,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation"
          },
          "400": {
            "description": "Invalid tag value"
          }
        }
      }
    },
   
  "/auth/register/factory": {
    "post": {
      "tags": ["auth"],
      "summary": "Register Factory/Customer Company",
      "description": "Registers a new user as a factory or customer company.",
      "operationId": "registerFactory",
      "parameters": [
        {
          "name": "name",
          "in": "query",
          "required": true,
          "schema": {
            "type": "string"
          },
          "example": "Factory Co."
        },
        {
          "name": "phone",
          "in": "query",
          "required": true,
          "schema": {
            "type": "string"
          },
          "example": "01012345678"
        },
        {
          "name": "password",
          "in": "query",
          "required": true,
          "schema": {
            "type": "string"
          },
          "example": "password123"
        },
        {
          "name": "c_password",
          "in": "query",
          "required": true,
          "schema": {
            "type": "string"
          },
          "example": "password123"
        }
      ],
      "responses": {
        "200": {
          "description": "Registration successful"
        },
        "422": {
          "description": "Validation Error"
        }
      }
    }
  },



    "/users/drivercompanyinfo/{id}": {
  "post": {
    "tags": [
      "users"
    ],
    "summary": "Register Driver Company Info",
    "description": "Add additional driver company information after initial registration.",
    "operationId": "registerDriverCompanyInfo",
    "produces": [
      "application/json"
    ],
    "parameters": [
      {
        "name": "id",
        "in": "path",
        "required": true,
        "type": "integer",
        "description": "Driver company user ID"
      },
      {
        "in": "body",
        "name": "body",
        "description": "Driver company extra info payload",
        "required": true,
        "schema": {
          "type": "object",
          "required": [
            "commercial_record",
            "tax_card"
          ],
          "properties": {
            "commercial_record": {
              "type": "string",
              "example": "CRM12345678"
            },
            "tax_card": {
              "type": "string",
              "example": "TAX987654321"
            },
            "location": {
              "type": "string",
              "example": "Jeddah, Saudi Arabia"
            },
            "longitude": {
              "type": "string",
              "example": "39.19797"
            },
            "latitude": {
              "type": "string",
              "example": "21.48581"
            },
            "bank_name": {
              "type": "string",
              "example": "National Commercial Bank"
            },
            "branch_name": {
              "type": "string",
              "example": "Main Branch"
            },
            "account_holder_name": {
              "type": "string",
              "example": "Driver Company LLC"
            },
            "account_number": {
              "type": "string",
              "example": "12345678901234"
            },
            "soft_code": {
              "type": "string",
              "example": "NCB123"
            },
            "iban": {
              "type": "string",
              "example": "SA0380000000608010167519"
            }
          }
        }
      }
    ],
    "responses": {
      "200": {
        "description": "Driver company information added successfully",
        "schema": {
          "type": "object",
          "properties": {
            "success": {
              "type": "boolean",
              "example": true
            },
            "message": {
              "type": "string",
              "example": "Driver company information added successfully."
            },
            "data": {
              "type": "object",
              "properties": {
                "token": {
                  "type": "string",
                  "example": "eyJ0eXAiOiJKV1QiLCJhb..."
                },
                "user": {
                  "$ref": "#/definitions/User"
                }
              }
            }
          }
        }
      },
      "422": {
        "description": "Validation Error"
      }
    }
  }
},

    
    
    "/auth/register/driver": {
      "post": {
        "tags": [
          "auth"
        ],
        "summary": "create new driver user account ",
        "description": "",
        "operationId": "DriverRegister",
        "produces": [
          "application/xml",
          "application/json"
        ],
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "description": "The password that needs to register . ",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Driver"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Driver"
              }
            }
          },
          "400": {
            "description": "Invalid tag value"
          }
        }
      }
    },
    "/auth/register/drivercompany": {
      "post": {
        "tags": ["auth"],
        "summary": "create new driver company user account ",
        "description": "",
        "operationId": "DriverCompanyRegister",
        "produces": [
          "application/xml",
          "application/json"
        ],
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "description": "The password that needs to register . ",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/DriverCompany"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/DriverCompany"
              }
            }
          },
          "400": {
            "description": "Invalid tag value"
          }
        }
      }
    }
  },
  
 


  
  
  

  "securityDefinitions": {
    "reals_auth": {
      "type": "oauth2",
      "authorizationUrl": "https://docs.estateline.click/api/auth/login",
      "flow": "implicit",
      "scopes": {
        "write:reals": "modify real estate in your account",
        "read:reals": "read your real estate"
      }
    },
    "api_key": {
      "type": "apiKey",
      "name": "api_key",
      "in": "header"
    }
  },
  "definitions": {
    "Order": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "format": "int64"
        },
        "user_id": {
          "type": "integer"
        },
        "car_id": {
          "type": "integer"
        },
        "shipment_type_id": {
          "type": "integer"
        },
        "pick_up_location": {
          "type": "string"
        },
        "drop_of_location": {
          "type": "string"
        },
        "spoil_quickly": {
          "type": "boolean"
        },
        "breakable": {
          "type": "boolean"
        },
        "size": {
          "type": "integer"
        },
        "weight_ton": {
          "type": "integer"
        },
        "ton_price": {
          "type": "integer"
        },
        "shipping_date": {
          "type": "string"
        },
        "desc": {
          "type": "string"
        },
        "notes": {
          "type": "string"
        },
        "status": {
          "type": "string"
        }
      },
      "xml": {
        "name": "Order"
      }
    },
    "OrderStatus": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "format": "int64"
        },
        "user_id": {
          "type": "integer"
        },
        "order_id": {
          "type": "integer"
        },
        "change_by": {
          "type": "string"
        },
        "desc": {
          "type": "string"
        },
        "notes": {
          "type": "string"
        },
        "status": {
          "type": "string"
        }
      },
      "xml": {
        "name": "OrderStatus"
      }
    },
    "Offer": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "format": "int64"
        },
        "user_id": {
          "type": "integer"
        },
        "car_id": {
          "type": "integer"
        },
        "driver_id": {
          "type": "integer"
        },
        "price": {
          "type": "integer"
        },
        "desc": {
          "type": "string"
        },
        "notes": {
          "type": "string"
        },
        "status": {
          "type": "string"
        }
      },
      "xml": {
        "name": "Offer"
      }
    },
    "OfferStatus": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "format": "int64"
        },
        "user_id": {
          "type": "integer"
        },
        "offer_id": {
          "type": "integer"
        },
        "change_by": {
          "type": "string"
        },
        "desc": {
          "type": "string"
        },
        "notes": {
          "type": "string"
        },
        "status": {
          "type": "string"
        }
      },
      "xml": {
        "name": "OfferStatus"
      }
    },
    "PaymentMethod": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "format": "int64"
        },
        "publishable_key": {
          "type": "string"
        },
        "secret_key": {
          "type": "string"
        },
        "type": {
          "type": "string"
        },
        "desc": {
          "type": "string"
        },
        "notes": {
          "type": "string"
        },
        "active": {
          "type": "boolean"
        }
      },
      "xml": {
        "name": "ShipmentType"
      }
    },
    "ShipmentType": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "format": "int64"
        },
        "name_ar": {
          "type": "string"
        },
        "name_en": {
          "type": "string"
        },
        "active": {
          "type": "boolean"
        }
      },
      "xml": {
        "name": "ShipmentType"
      }
    },
    "Car": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "format": "int64"
        },
        "name_ar": {
          "type": "string"
        },
        "name_en": {
          "type": "string"
        },
        "weight": {
          "type": "integer"
        },
        "image": {
          "type": "string",
          "format": "binary"
        },
        "active": {
          "type": "boolean"
        }
      },
      "xml": {
        "name": "Car"
      }
    },
    "User": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "format": "int64"
        },
        "name": {
          "type": "string"
        },
        "email": {
          "type": "string"
        },
        "password": {
          "type": "string"
        },
        "phone": {
          "type": "string"
        },
        "location": {
          "type": "string"
        },
        "image": {
          "type": "string",
          "format": "binary"
        },
        "type": {
          "type": "string"
        },
        "active": {
          "type": "boolean"
        }
      },
      "xml": {
        "name": "User"
      }
    },
    "Enterprise": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "format": "int64"
        },
        "name": {
          "type": "string"
        },
        "email": {
          "type": "string"
        },
        "password": {
          "type": "string"
        },
        "phone": {
          "type": "string"
        },
        "imamge": {
          "type": "string",
          "format": "binary"
        },
        "commercial_record": {
          "type": "string"
        },
        "commercial_record_image_f": {
          "type": "string",
          "format": "binary"
        },
        "commercial_record_image_b": {
          "type": "string",
          "format": "binary"
        },
        "tax_card": {
          "type": "string"
        },
        "tax_card_image_f": {
          "type": "string",
          "format": "binary"
        },
        "tax_card_image_b": {
          "type": "string",
          "format": "binary"
        },
        "location": {
          "type": "string"
        },
        "image": {
          "type": "string",
          "format": "binary"
        },
        "type": {
          "type": "string"
        },
        "bank_name": {
          "type": "string"
        },
        "branch_name": {
          "type": "string"
        },
        "account_holder_name": {
          "type": "string"
        },
        "account_number": {
          "type": "string"
        },
        "soft_code": {
          "type": "string"
        },
        "iban": {
          "type": "string"
        },
        "active": {
          "type": "boolean"
        }
      },
      "xml": {
        "name": "Enterprise"
      }
    },
    "Driver": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "format": "int64"
        },
        "name": {
          "type": "string"
        },
        "email": {
          "type": "string"
        },
        "password": {
          "type": "string"
        },
        "phone": {
          "type": "string"
        },
        "image": {
          "type": "string",
          "format": "binary"
        },
        "national_id": {
          "type": "string"
        },
        "national_id_image_f": {
          "type": "string",
          "format": "binary"
        },
        "national_id_image_b": {
          "type": "string",
          "format": "binary"
        },
        "track_type": {
          "type": "string"
        },
        "driving_license_number": {
          "type": "string"
        },
        "track_license_number": {
          "type": "string"
        },
        "track_number": {
          "type": "string"
        },
        "company_id": {
          "type": "integer"
        },
        "location": {
          "type": "string"
        },
        "type": {
          "type": "string"
        },
        "active": {
          "type": "boolean"
        }
      },
      "xml": {
        "name": "Driver"
      }
    },
    "DriverCompany": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "format": "int64"
        },
        "name": {
          "type": "string"
        },
        "email": {
          "type": "string"
        },
        "password": {
          "type": "string"
        },
        "phone": {
          "type": "string"
        },
        "imamge": {
          "type": "string",
          "format": "binary"
        },
        "commercial_record": {
          "type": "string"
        },
        "commercial_record_image_f": {
          "type": "string",
          "format": "binary"
        },
        "commercial_record_image_b": {
          "type": "string",
          "format": "binary"
        },
        "tax_card": {
          "type": "string"
        },
        "tax_card_image_f": {
          "type": "string",
          "format": "binary"
        },
        "tax_card_image_b": {
          "type": "string",
          "format": "binary"
        },
        "location": {
          "type": "string"
        },
        "image": {
          "type": "string",
          "format": "binary"
        },
        "type": {
          "type": "string"
        },
        "bank_name": {
          "type": "string"
        },
        "branch_name": {
          "type": "string"
        },
        "account_holder_name": {
          "type": "string"
        },
        "account_number": {
          "type": "string"
        },
        "soft_code": {
          "type": "string"
        },
        "iban": {
          "type": "string"
        },
        "active": {
          "type": "boolean"
        }
      },
      "xml": {
        "name": "DriverCompany"
      }
    },
    "SupportCenter": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "format": "int64"
        },
        "title": {
          "type": "string"
        },
        "message": {
          "type": "string"
        },
        "desc": {
          "type": "string"
        },
        "notes": {
          "type": "string"
        },
        "user_id": {
          "type": "string"
        },
        "replay": {
          "type": "string"
        },
        "replay_by": {
          "type": "string"
        }
      },
      "xml": {
        "name": "SupportCenter"
      }
    },
    "Evaluate": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "format": "int64"
        },
        "comment": {
          "type": "string"
        },
        "comment_replay": {
          "type": "string"
        },
        "rate": {
          "type": "string"
        },
        "notes": {
          "type": "string"
        },
        "user_id": {
          "type": "integer"
        },
        "order_id": {
          "type": "integer"
        },
        "user2_id": {
          "type": "integer",
          "description": "the reserver user"
        },
        "active": {
          "type": "boolean"
        }
      },
      "xml": {
        "name": "Evaluate"
      }
    },
    "PayTransaction": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "format": "int64"
        },
        "transaction_id": {
          "type": "string"
        },
        "amount": {
          "type": "number"
        },
        "fee": {
          "type": "number"
        },
        "currency": {
          "type": "string"
        },
        "payment_type": {
          "type": "string"
        },
        "status": {
          "type": "string"
        },
        "payment_method": {
          "type": "string"
        },
        "name_in_card": {
          "type": "string"
        },
        "order_id": {
          "type": "integer"
        },
        "deleted_at": {
          "type": "string"
        },
        "receiver_name": {
          "type": "string"
        },
        "receiver_account": {
          "type": "string"
        }
      },
      "xml": {
        "name": "PayTransaction"
      }
    },
    "Transaction": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "format": "int64"
        },
        "pay_transaction_id": {
          "type": "integer"
        },
        "payment_method_id": {
          "type": "integer"
        },
        "rate": {
          "type": "string"
        },
        "notes": {
          "type": "string"
        },
        "user_id": {
          "type": "integer"
        },
        "order_id": {
          "type": "integer"
        },
        "change_by": {
          "type": "integer"
        },
        "active": {
          "type": "boolean"
        },
        "price": {
          "type": "number"
        }
      },
      "xml": {
        "name": "Transaction"
      }
    },
    "accessToken": {
      "type": "object",
      "properties": {
        "token": {
          "type": "string"
        }
      },
      "xml": {
        "name": "accessToken"
      }
    },
    "ApiResponse": {
      "type": "object",
      "properties": {
        "code": {
          "type": "integer",
          "format": "int32"
        },
        "type": {
          "type": "string"
        },
        "message": {
          "type": "string"
        },
        "success": {
          "type": "boolean"
        }
      }
    }
  },
  "externalDocs": {
    "description": "Find out more about Swagger",
    "url": "http://swagger.io"
  }
}